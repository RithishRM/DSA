Data Structure-IT the way to arrange data in main memory for efficient usage.eg-Array,Linked List,Trees.
Algorithm-It is sequence of steps to solve a problem.Eg-Sorting an array.
Heap-In heap, the program requests dynamic memory from the main memory.This is more advantageous than stack as it deletes the memory immediately after use(Efficeint).
Time Complexity-It is the amount of time an alogorithm takes while varying the input.
Big O-Order of. 

-->Abstract Data Type(ADT)-It is the Minimum required functionalities(MRF) and some operations in a Data Structures.
    Eg-Arrays--MRF-get(i),set(i,num)....[i is the index here]
      --Operations=Insert,Delete,Add,Resize.
    Abstraction-It refers to process of hiding the details of code.
  

-->ADT's AND ARRAYS:-
  *ADT's=set of values + set of operations.
    set of values=total_size,used_size and base address
    set of operations=get(i),set(i,num),add(arr),max(L).

  *stacks and heaps-In NOTES.

  *NOTE-An array cant be extended,it can only be reallocated space in memory to addition of new element.
  
  *Primary Operations in Array:-
    i)Traversal-It is process of visiting every element in the array.
    ii)Insertion:-
      Case 1-Order should be maintained.
          ind 2-->5 in array with [1,2,6,7,4]
          Then it becomes [1,2,5,6,7,4].  NOTE:The array should have extra space.
          Here the elements move by one index.
      Case 2-Order need not be maintained.
          ind 2-->5 in array with [1,2,6,7,4]
          Then it becomes [1,2,5,7,4,6].  NOTE:The array should have extra space.
          The element in the index goes after the last used element in the array.
    iii)Deletion:-
        Case 1-Deletion removes the element to be removed and moves the remaining element forward by one index.
        Case 2-The element to be deleted is removed and the last element is replaced in its place.
    iv)Searching
        Linear Search-It is the process of searching each element of an unsorted array until the element is found.Done through Array Traversal.
        Binary Search-t is the process of searching  element of an sorted array.
-->Linked List :-
  *In Circularly linked list the head does not matter ,as it is only a pointer where the linked list starts.
  *How to Make Empty Linked Lists:-
    i)Singly L.L. 
              p->NULL
    ii)Circular LL
              Circular LL have a head element(Node) that is only used to provide acess to the L.L.
              In an Empty circular LL the head node points to itself. 
              This is only alternate visualization

-->Stack-It is a array with a Top(index).Top has a default value of -1 if it is empty.

  * Parenthesis Matching Problem in C :-
    It possible to tell if expression is unmatched if it is small.But if it is Expresstion with a lots of Characters and Parenthesis then it will 
    be hard to tell wheather it balanced or unbalanced.So we use both Stack and Array to find out wheather a expression is balanced or unbalanced.
    Solving-
    The Expresstion is first put inside a array and Then Traversed.If it is 
      ( --> Push into Stack.
      ) -->Pop in Stack.

    Conditions For Balanced Expresstion :-
    1)While Popping the stack should'nt Underflow ->Then it is unbalanced expression.
    2)At End Of Expression(EOE),the stack should be Empty ->Else it unbalanced Expression.
       
  *Infix,Postfix and Prefix:-
    >These are Notations to write a expression.
    >Infix-
      <operant> <operator> <operant>    Eg-p*q,a+b,etc.
    >Postfix-
      <operant>,<operant> <operator>    Eg- ab +,pq *
    >Prefix-
      <operator> <operant>,<operant>
    >We convert Infix to postfix as it is easier for machine to understand.
        Infix-G*(A+D)*D
        Postfix-GAD+*D*
    >How to Convert Infix to Prefix and Postfix:-
        i)Parenthesis the hole expression.
        ii)The start converting from infix to postfix from the innermost expression.

  -->Queue:Follows FIFO.
    >Data:Storage,Insertion End and Deletion End .
    >Methods:
      Enqueue-Add a Element 
      Dequeue-Remove a element .
      First value.
      Last value
      Peek(pos)
      IsFull,IsEmpty
    >Can be Implemented In Array,L_L and other ADT's too.

    >Drawbacks-
      Space is not efficientle used.(As the space before the front is empty upon Deletion)
      Therefore,To combat this Circular Queue is Introduced.

    >Circular Queue:-
      Increment Occurs like:-
        Linear Increment - 
          i=i+1
        Circular Increment -
          i=(i+1) % size **Important

    >Double-Ended Queue:-
    It doesnt follow FIFO

-->Sorting Algorithm:-
  *Important Factors-Time Complexity,Space Complexity(Does ur algorithm take lot of space for big inputs),Stability(When two equal values are being sorted, the appearing in array should also be first in sorted array),Internal Sorting Algorithm(All data is loaded in memory) and External Sorting Algorithm(opp),Adaptive, Recurcive and Non Recurcive.
  *These Factors help us take a decision on which sorting algorithm to use.
  i)


-->Trees:-
  * It is Ideal for representing Hierarchical Data.
  *Binary Tree-They are Trees with thier degree(No. of direct Children) not more than 2.
  *Edge-Link That connects 2 Nodes.
  * n nodes=n-1 edges.
  *Degree of Tree = Highest degree of a Node present in the Tree.

  * Types Of Binary Trees:
    i)Full or Strict-All Nodes have either 0 or 2 Children.
    ii)Perfect-Internal nodes have 2 Children and All leaf Nodes are on Same Level.
    iii)Complete-All levels are Completely filled except possibly the last level and last level is left alligned.
    iv)Degentrate Tree - It the when Parent Nodes only Have One Child.In it there is left Skewed and right Skewed.

  * Traversal in Tree:-
    i)PreOrder Traversal:
        Root-->Left Subtree-->Right Subtree

    ii)PostOrder Traversal:
        Left Subtree-->Right Subtree-->Root

    iii)InOrder Traversal:
        Left Subtree-->Root -->Right Subtree
    REMEMBER-Through the Position of the Root

  *Binary Search Tree:-
    i)All nodes left of left subtree are lesser than root.
    ii)All nodes of right subtree are greater than root.
    iii) There are no duplicate nodes.
    iv)InOrder Traversal of the BST gives a ascending Sorted Array.

  *BST Node Deletion:-
    i)Delete Leaf Node-Search Tree-Delete Node .
    ii)Non Leaf Node -Search Node ,Search for Inorder Post and Inord Pre,Keep doing this until tree has no empty Node.


  * AVL Trees - These are made to prevent the trees from taking a linear structure.
      Every Node in AVL has Balance Factor(BF) where 
              BF=Hieght of right subtree - Hieght of left subtree
      For a tree to be balanced 
              | BF |  <=  1


-->Graphs:-Non Linear Data Structure.They G=(V,E) are collection of edges connecting Nodes/vertices.
    An Edge is defined by its 2 unique endpoints.Directed edge-One way connection and Unidirected Edge-Two way connection.
    Directed Graph-Has all the Directed edges.
    UnDirected Graph-Has all the UnDirected edges.
    Companies use graph therory internally to suggest mutual contacts to people .

    * Representation Of a Graph:-
      i)Adjacency List - Mark the node with the list(Linked List) of its nieghbors.Eg - {(0,1)-They are nodes its connected to}
      ii) Adjacency Matrix - They are the values of nodes in rows and columns with The thier value marked with 1 if thier is connection and 0 if the nodes have no connection.
          NOTE - The node can be self looped/connected.
      
    * Graph Traversal:It is process of visiting(checking or updating) each node in a graph.
      Two Types of Traversal Algorithm are :-
      i) Breadth First Graph - In it we first take a Random Node and start with visiting its connecting nodes first then we repeat the process continously till all nodes are visited.
                It is Done By :-
                METHOD_1
                  First Take a Node (root) and construct a Tree (by hanging it).
                  Mark all sideways and duplicate edges as dashed calling it BFS spanning tree.
                  Level Order of the BFS Tree is BFS Traversal.

                METHOD_2
                  Take a Random Node and Enqueue it in the Visited  and Exploration Queue.
                  Visit All the connected vertices and Enqueue for them in Visited  and Exploration Queue.
                  Deque the root from Exploration Queue.
                  Keep Repeating the process and when Exploration Queue is empty the traversal is done with the Visited Queue having the Traversed List.
          There can be multiple BFS for same graph.
      ii)Depth First Graph - In DFS we keep exploring a the graph in depth till we find a node that was previously explored.
                 It is Done By :-
                  Start by puttiny any node in Top of Stack.
                  Put the Top of stack in visited and remove it from stack .Before removing Add the Items not in visited and to stack that are connected.
                  Keep repeating till stack not Empty.


-->Hashing - It is concept that was introduced to store and retrieve data in O(1) . Hashing is the process of transformsing the original key into a another value 
            which is shorter and fixed length . This key helps in finding original key faster .
            Hash Function - Maps the key value in the Hash Table range.
            Collision - It the process when 2 or more keys generate the same has hash .We deal with it in :-
                  i)Seperate Chaining(Open Hashing) - This handles the collision by making every hash table cell value coming to the point to a linked list with thier identical hash values .
                  ii)Open Addressig (Closed Hashing) - Instead Of making new Spots for incoming value they make space in use the free space in the Hash Table.
                      Linear Probing- It is the process of resolving collision by finding the next empty spot in Hash Table through the formula:
                                    key=(key + i) % tableSize     where i=1,2,3,...
                      Quadratic Probing - Resolves collision using below Formula:-
                                    key = ((key)+i^2)% tableSize
                Rehashing - The process of increasing the hash table size when the Load Factor exceeds a certain value.
                      Load Factor = No.of Filled Values / Total Capactity 
